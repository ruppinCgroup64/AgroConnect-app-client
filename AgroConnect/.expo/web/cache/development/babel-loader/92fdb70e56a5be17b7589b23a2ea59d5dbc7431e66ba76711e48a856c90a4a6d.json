{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport React, { useState, useEffect } from 'react';\nimport { NavigationContainer, DarkTheme, DefaultTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { EventRegister } from 'react-native-event-listeners';\nimport theme from \"../theme/theme\";\nimport themeContext from \"../theme/themeContex\";\nimport { Colors } from \"../theme/color\";\nimport Login from \"../screens/Login\";\nimport Splash from \"../screens/Splash\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function StackNavigator() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    darkMode = _useState2[0],\n    setDarkMode = _useState2[1];\n  useEffect(function () {\n    var listener = EventRegister.addEventListener('ChangeTheme', function (data) {\n      setDarkMode(data);\n      console.log(data);\n    });\n    return function () {\n      EventRegister.removeAllListeners(listener);\n    };\n  }, [darkMode]);\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showSplashScreen = _useState4[0],\n    setshowSplashScreen = _useState4[1];\n  useEffect(function () {\n    setTimeout(function () {\n      setshowSplashScreen(false);\n    }, 4000);\n  }, []);\n  return _jsx(themeContext.Provider, {\n    value: darkMode === true ? theme.dark : theme.light,\n    children: _jsxs(NavigationContainer, {\n      theme: darkMode === true ? DarkTheme : DefaultTheme,\n      children: [_jsx(StatusBar, {\n        backgroundColor: darkMode === true ? Colors.active : Colors.secondary,\n        barStyle: darkMode === true ? 'light-content' : 'dark-content',\n        translucent: false\n      }), _jsx(Stack.Navigator, {\n        children: _jsx(Stack.Screen, {\n          name: \"Login\",\n          component: Login,\n          options: {\n            headerShown: false\n          }\n        })\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","NavigationContainer","DarkTheme","DefaultTheme","createNativeStackNavigator","EventRegister","theme","themeContext","Colors","Login","Splash","jsx","_jsx","jsxs","_jsxs","Stack","StackNavigator","_useState","_useState2","_slicedToArray","darkMode","setDarkMode","listener","addEventListener","data","console","log","removeAllListeners","_useState3","_useState4","showSplashScreen","setshowSplashScreen","setTimeout","Provider","value","dark","light","children","StatusBar","backgroundColor","active","secondary","barStyle","translucent","Navigator","Screen","name","component","options","headerShown"],"sources":["E:/React-native/PoteaReact/src/navigator/StackNavigator.js"],"sourcesContent":["import { View, Text, StatusBar } from 'react-native'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { NavigationContainer, DarkTheme, DefaultTheme } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { EventRegister } from 'react-native-event-listeners';\r\nimport theme from '../theme/theme';\r\nimport themeContext from '../theme/themeContex';\r\nimport { Colors } from '../theme/color';\r\nimport Login from '../screens/Login';\r\n\r\nimport Splash from '../screens/Splash';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function StackNavigator() {\r\n  const [darkMode, setDarkMode] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const listener = EventRegister.addEventListener('ChangeTheme', (data) => {\r\n      setDarkMode(data)\r\n      console.log(data)\r\n\r\n    })\r\n\r\n    return () => {\r\n      EventRegister.removeAllListeners(listener)\r\n    }\r\n  }, [darkMode])\r\n\r\n  const [showSplashScreen, setshowSplashScreen] = useState(true);\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setshowSplashScreen(false);\r\n    }, 4000);\r\n\r\n\r\n  }, [])\r\n  return (\r\n    <themeContext.Provider value={darkMode === true ? theme.dark : theme.light}>\r\n      <NavigationContainer theme={darkMode === true ? DarkTheme : DefaultTheme}>\r\n        <StatusBar backgroundColor={darkMode === true ? Colors.active : Colors.secondary}\r\n          barStyle={darkMode === true ? 'light-content' : 'dark-content'} translucent={false} />\r\n        <Stack.Navigator>\r\n          {/* {\r\n            showSplashScreen ?\r\n              <Stack.Screen\r\n                name=\"Splash\"\r\n                component={Splash}\r\n                options={{ headerShown: false }} />\r\n              : null\r\n          } */}\r\n          {/* <Stack.Screen\r\n            name=\"Splash\"\r\n            component={Splash}\r\n            options={{ headerShown: false }} /> */}\r\n            <Stack.Screen\r\n            name=\"Login\"\r\n            component={Login}\r\n            options={{ headerShown: false }} />\r\n        </Stack.Navigator>\r\n      </NavigationContainer>\r\n    </themeContext.Provider>\r\n  )\r\n}"],"mappings":";;;;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,mBAAmB,EAAEC,SAAS,EAAEC,YAAY,QAAQ,0BAA0B;AACvF,SAASC,0BAA0B,QAAQ,gCAAgC;AAC3E,SAASC,aAAa,QAAQ,8BAA8B;AAC5D,OAAOC,KAAK;AACZ,OAAOC,YAAY;AACnB,SAASC,MAAM;AACf,OAAOC,KAAK;AAEZ,OAAOC,MAAM;AAA0B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEvC,IAAMC,KAAK,GAAGX,0BAA0B,CAAC,CAAC;AAE1C,eAAe,SAASY,cAAcA,CAAA,EAAG;EACvC,IAAAC,SAAA,GAAgClB,QAAQ,CAAC,KAAK,CAAC;IAAAmB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAxCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAE5BlB,SAAS,CAAC,YAAM;IACd,IAAMsB,QAAQ,GAAGjB,aAAa,CAACkB,gBAAgB,CAAC,aAAa,EAAE,UAACC,IAAI,EAAK;MACvEH,WAAW,CAACG,IAAI,CAAC;MACjBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IAEnB,CAAC,CAAC;IAEF,OAAO,YAAM;MACXnB,aAAa,CAACsB,kBAAkB,CAACL,QAAQ,CAAC;IAC5C,CAAC;EACH,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC;EAEd,IAAAQ,UAAA,GAAgD7B,QAAQ,CAAC,IAAI,CAAC;IAAA8B,UAAA,GAAAV,cAAA,CAAAS,UAAA;IAAvDE,gBAAgB,GAAAD,UAAA;IAAEE,mBAAmB,GAAAF,UAAA;EAC5C7B,SAAS,CAAC,YAAM;IACdgC,UAAU,CAAC,YAAM;MACfD,mBAAmB,CAAC,KAAK,CAAC;IAC5B,CAAC,EAAE,IAAI,CAAC;EAGV,CAAC,EAAE,EAAE,CAAC;EACN,OACEnB,IAAA,CAACL,YAAY,CAAC0B,QAAQ;IAACC,KAAK,EAAEd,QAAQ,KAAK,IAAI,GAAGd,KAAK,CAAC6B,IAAI,GAAG7B,KAAK,CAAC8B,KAAM;IAAAC,QAAA,EACzEvB,KAAA,CAACb,mBAAmB;MAACK,KAAK,EAAEc,QAAQ,KAAK,IAAI,GAAGlB,SAAS,GAAGC,YAAa;MAAAkC,QAAA,GACvEzB,IAAA,CAAC0B,SAAS;QAACC,eAAe,EAAEnB,QAAQ,KAAK,IAAI,GAAGZ,MAAM,CAACgC,MAAM,GAAGhC,MAAM,CAACiC,SAAU;QAC/EC,QAAQ,EAAEtB,QAAQ,KAAK,IAAI,GAAG,eAAe,GAAG,cAAe;QAACuB,WAAW,EAAE;MAAM,CAAE,CAAC,EACxF/B,IAAA,CAACG,KAAK,CAAC6B,SAAS;QAAAP,QAAA,EAaZzB,IAAA,CAACG,KAAK,CAAC8B,MAAM;UACbC,IAAI,EAAC,OAAO;UACZC,SAAS,EAAEtC,KAAM;UACjBuC,OAAO,EAAE;YAAEC,WAAW,EAAE;UAAM;QAAE,CAAE;MAAC,CACtB,CAAC;IAAA,CACC;EAAC,CACD,CAAC;AAE5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}