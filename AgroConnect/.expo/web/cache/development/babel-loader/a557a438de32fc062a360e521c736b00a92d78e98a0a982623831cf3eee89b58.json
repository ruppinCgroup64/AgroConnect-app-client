{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"autoFocus\", \"autofillFromClipboard\", \"autofillListenerIntervalMS\", \"autoCapitalize\", \"clearTextOnFocus\", \"defaultValue\", \"focusStyles\", \"handleChange\", \"inputContainerStyles\", \"inputStyles\", \"isRTL\", \"keyboardType\", \"numberOfInputs\", \"placeholder\", \"secureTextEntry\", \"selectTextOnFocus\", \"style\", \"testIDPrefix\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport Clipboard from '@react-native-clipboard/clipboard';\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useReducer, useRef } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { fillOtpCode } from \"./helpers\";\nimport OtpInput from \"./OtpInput\";\nimport reducer from \"./reducer\";\nimport { OtpInputsRef } from \"./types\";\nvar supportAutofillFromClipboard = Platform.OS === 'android' || parseInt(Platform.Version, 10) < 14;\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  }\n});\nvar OtpInputs = forwardRef(function (_ref, ref) {\n  var autoFocus = _ref.autoFocus,\n    _ref$autofillFromClip = _ref.autofillFromClipboard,\n    autofillFromClipboard = _ref$autofillFromClip === void 0 ? supportAutofillFromClipboard : _ref$autofillFromClip,\n    _ref$autofillListener = _ref.autofillListenerIntervalMS,\n    autofillListenerIntervalMS = _ref$autofillListener === void 0 ? 1000 : _ref$autofillListener,\n    _ref$autoCapitalize = _ref.autoCapitalize,\n    autoCapitalize = _ref$autoCapitalize === void 0 ? 'none' : _ref$autoCapitalize,\n    _ref$clearTextOnFocus = _ref.clearTextOnFocus,\n    clearTextOnFocus = _ref$clearTextOnFocus === void 0 ? false : _ref$clearTextOnFocus,\n    defaultValue = _ref.defaultValue,\n    focusStyles = _ref.focusStyles,\n    _ref$handleChange = _ref.handleChange,\n    handleChange = _ref$handleChange === void 0 ? console.log : _ref$handleChange,\n    inputContainerStyles = _ref.inputContainerStyles,\n    inputStyles = _ref.inputStyles,\n    _ref$isRTL = _ref.isRTL,\n    isRTL = _ref$isRTL === void 0 ? false : _ref$isRTL,\n    _ref$keyboardType = _ref.keyboardType,\n    keyboardType = _ref$keyboardType === void 0 ? 'phone-pad' : _ref$keyboardType,\n    _ref$numberOfInputs = _ref.numberOfInputs,\n    numberOfInputs = _ref$numberOfInputs === void 0 ? 4 : _ref$numberOfInputs,\n    _ref$placeholder = _ref.placeholder,\n    placeholder = _ref$placeholder === void 0 ? '' : _ref$placeholder,\n    _ref$secureTextEntry = _ref.secureTextEntry,\n    secureTextEntry = _ref$secureTextEntry === void 0 ? false : _ref$secureTextEntry,\n    _ref$selectTextOnFocu = _ref.selectTextOnFocus,\n    selectTextOnFocus = _ref$selectTextOnFocu === void 0 ? true : _ref$selectTextOnFocu,\n    style = _ref.style,\n    _ref$testIDPrefix = _ref.testIDPrefix,\n    testIDPrefix = _ref$testIDPrefix === void 0 ? 'otpInput' : _ref$testIDPrefix,\n    restProps = _objectWithoutProperties(_ref, _excluded);\n  var previousCopiedText = useRef('');\n  var inputs = useRef([]);\n  var _useReducer = useReducer(reducer, {}, function () {\n      return {\n        otpCode: fillOtpCode(numberOfInputs, defaultValue),\n        handleChange: handleChange,\n        hasKeySupport: Platform.OS === 'ios'\n      };\n    }),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    _useReducer2$ = _useReducer2[0],\n    otpCode = _useReducer2$.otpCode,\n    hasKeySupport = _useReducer2$.hasKeySupport,\n    dispatch = _useReducer2[1];\n  useEffect(function () {\n    if (defaultValue) {\n      dispatch({\n        type: 'setOtpCode',\n        payload: {\n          numberOfInputs: numberOfInputs,\n          code: defaultValue\n        }\n      });\n    }\n  }, [defaultValue, numberOfInputs]);\n  useEffect(function () {\n    dispatch({\n      type: 'setHandleChange',\n      payload: handleChange\n    });\n  }, [handleChange]);\n  useImperativeHandle(ref, function () {\n    return {\n      reset: function reset() {\n        dispatch({\n          type: 'clearOtp',\n          payload: numberOfInputs\n        });\n        inputs.current.forEach(function (input) {\n          var _input$current;\n          return input === null || input === void 0 ? void 0 : (_input$current = input.current) === null || _input$current === void 0 ? void 0 : _input$current.clear();\n        });\n        previousCopiedText.current = '';\n        Clipboard.setString('');\n      },\n      focus: function focus() {\n        var _firstInput$current;\n        var firstInput = inputs.current[0];\n        firstInput === null || firstInput === void 0 ? void 0 : (_firstInput$current = firstInput.current) === null || _firstInput$current === void 0 ? void 0 : _firstInput$current.focus();\n      }\n    };\n  }, [numberOfInputs]);\n  var handleInputTextChange = function handleInputTextChange(text, index) {\n    if (!text.length) {\n      handleClearInput(index);\n    }\n    if (text.length > 1) {\n      handleClearInput(index);\n      Keyboard.dismiss();\n      return fillInputs(text);\n    }\n    if (text) {\n      dispatch({\n        type: 'setOtpTextForIndex',\n        payload: {\n          text: text,\n          index: index\n        }\n      });\n      focusInput(index + 1);\n    }\n    if (index === numberOfInputs - 1 && text) {\n      Keyboard.dismiss();\n    }\n  };\n  var _handleTextChange = function handleTextChange(text, index) {\n    if (Platform.OS === 'android' && !hasKeySupport || Platform.OS === 'ios' && text.length > 1) {\n      handleInputTextChange(text, index);\n    }\n  };\n  var _handleKeyPress = function handleKeyPress(_ref2, index) {\n    var key = _ref2.nativeEvent.key;\n    var text = key === 'Backspace' || key.length > 1 ? '' : key;\n    handleInputTextChange(text, index);\n    if (Platform.OS === 'android' && !hasKeySupport && !isNaN(parseInt(key))) dispatch({\n      type: 'setHasKeySupport',\n      payload: true\n    });\n  };\n  var focusInput = useCallback(function (index) {\n    if (index >= 0 && index < numberOfInputs) {\n      var _input$current2;\n      var input = inputs.current[index];\n      input === null || input === void 0 ? void 0 : (_input$current2 = input.current) === null || _input$current2 === void 0 ? void 0 : _input$current2.focus();\n    }\n  }, [numberOfInputs]);\n  var handleClearInput = useCallback(function (inputIndex) {\n    var _input$current3;\n    var input = inputs.current[inputIndex];\n    input === null || input === void 0 ? void 0 : (_input$current3 = input.current) === null || _input$current3 === void 0 ? void 0 : _input$current3.clear();\n    dispatch({\n      type: 'setOtpTextForIndex',\n      payload: {\n        index: inputIndex,\n        text: ''\n      }\n    });\n    focusInput(inputIndex - 1);\n  }, [focusInput]);\n  var fillInputs = useCallback(function (code) {\n    dispatch({\n      type: 'setOtpCode',\n      payload: {\n        numberOfInputs: numberOfInputs,\n        code: code\n      }\n    });\n  }, [numberOfInputs]);\n  var listenOnCopiedText = useCallback(_asyncToGenerator(function* () {\n    var copiedText = yield Clipboard.getString();\n    var otpCodeValue = Object.values(otpCode).join('');\n    if ((copiedText === null || copiedText === void 0 ? void 0 : copiedText.length) === numberOfInputs && copiedText !== otpCodeValue && copiedText !== previousCopiedText.current) {\n      previousCopiedText.current = copiedText;\n      fillInputs(copiedText);\n    }\n  }), [fillInputs, numberOfInputs, otpCode]);\n  useEffect(function () {\n    var interval;\n    if (autofillFromClipboard) {\n      interval = setInterval(function () {\n        listenOnCopiedText();\n      }, autofillListenerIntervalMS);\n    }\n    return function () {\n      clearInterval(interval);\n    };\n  }, [autofillFromClipboard, autofillListenerIntervalMS, listenOnCopiedText, numberOfInputs]);\n  var renderInputs = function renderInputs() {\n    var iterationArray = Array(numberOfInputs).fill(0);\n    return iterationArray.map(function (_, index) {\n      var inputIndex = index;\n      if (isRTL) {\n        inputIndex = numberOfInputs - 1 - index;\n      }\n      var inputValue = otpCode[\"\" + inputIndex];\n      if (!inputs.current[inputIndex]) {\n        inputs.current[inputIndex] = React.createRef();\n      }\n      return React.createElement(OtpInput, _extends({\n        accessible: true,\n        accessibilityLabel: testIDPrefix + \"-\" + inputIndex,\n        autoCapitalize: autoCapitalize,\n        autoFocus: index === 0 && autoFocus,\n        clearTextOnFocus: clearTextOnFocus,\n        firstInput: index === 0,\n        focusStyles: focusStyles,\n        handleKeyPress: function handleKeyPress(keyPressEvent) {\n          return _handleKeyPress(keyPressEvent, inputIndex);\n        },\n        handleTextChange: function handleTextChange(text) {\n          return _handleTextChange(text, inputIndex);\n        },\n        inputContainerStyles: inputContainerStyles,\n        inputStyles: inputStyles,\n        inputValue: inputValue,\n        key: inputIndex,\n        keyboardType: keyboardType,\n        maxLength: Platform.select({\n          android: 1,\n          ios: index === 0 ? numberOfInputs : 1\n        }),\n        numberOfInputs: numberOfInputs,\n        placeholder: placeholder,\n        ref: inputs.current[inputIndex],\n        secureTextEntry: secureTextEntry,\n        selectTextOnFocus: selectTextOnFocus,\n        testID: testIDPrefix + \"-\" + inputIndex\n      }, restProps));\n    });\n  };\n  return React.createElement(View, {\n    style: style || styles.container\n  }, renderInputs());\n});\nexport { OtpInputsRef };\nexport default OtpInputs;","map":{"version":3,"names":["Clipboard","React","forwardRef","useCallback","useEffect","useImperativeHandle","useReducer","useRef","Keyboard","Platform","StyleSheet","View","fillOtpCode","OtpInput","reducer","OtpInputsRef","supportAutofillFromClipboard","OS","parseInt","Version","styles","create","container","alignItems","flex","flexDirection","justifyContent","OtpInputs","_ref","ref","autoFocus","_ref$autofillFromClip","autofillFromClipboard","_ref$autofillListener","autofillListenerIntervalMS","_ref$autoCapitalize","autoCapitalize","_ref$clearTextOnFocus","clearTextOnFocus","defaultValue","focusStyles","_ref$handleChange","handleChange","console","log","inputContainerStyles","inputStyles","_ref$isRTL","isRTL","_ref$keyboardType","keyboardType","_ref$numberOfInputs","numberOfInputs","_ref$placeholder","placeholder","_ref$secureTextEntry","secureTextEntry","_ref$selectTextOnFocu","selectTextOnFocus","style","_ref$testIDPrefix","testIDPrefix","restProps","_objectWithoutProperties","_excluded","previousCopiedText","inputs","_useReducer","otpCode","hasKeySupport","_useReducer2","_slicedToArray","_useReducer2$","dispatch","type","payload","code","reset","current","forEach","input","_input$current","clear","setString","focus","_firstInput$current","firstInput","handleInputTextChange","text","index","length","handleClearInput","dismiss","fillInputs","focusInput","handleTextChange","handleKeyPress","_ref2","key","nativeEvent","isNaN","_input$current2","inputIndex","_input$current3","listenOnCopiedText","_asyncToGenerator","copiedText","getString","otpCodeValue","Object","values","join","interval","setInterval","clearInterval","renderInputs","iterationArray","Array","fill","map","_","inputValue","createRef","createElement","_extends","accessible","accessibilityLabel","keyPressEvent","maxLength","select","android","ios","testID"],"sources":["D:\\CloneProject\\PoteaReact\\node_modules\\react-native-otp-inputs\\lib\\module\\index.tsx"],"sourcesContent":["import Clipboard from '@react-native-clipboard/clipboard';\nimport React, {\n  forwardRef,\n  RefObject,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useReducer,\n  useRef,\n} from 'react';\nimport {\n  Keyboard,\n  NativeSyntheticEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextInput,\n  TextInputKeyPressEventData,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { fillOtpCode } from './helpers';\nimport OtpInput from './OtpInput';\nimport reducer from './reducer';\nimport { OtpInputsRef, SupportedKeyboardType } from './types';\n\nconst supportAutofillFromClipboard =\n  Platform.OS === 'android' || parseInt(Platform.Version as string, 10) < 14;\n\ntype Props = TextInputProps & {\n  autofillFromClipboard: boolean;\n  autofillListenerIntervalMS?: number;\n  keyboardType?: SupportedKeyboardType;\n  style?: StyleProp<ViewStyle>;\n  focusStyles?: StyleProp<ViewStyle>;\n  defaultValue?: string;\n  handleChange: (otpCode: string) => void;\n  inputContainerStyles?: StyleProp<ViewStyle>;\n  inputStyles?: StyleProp<TextStyle>;\n  isRTL?: boolean;\n  numberOfInputs: number;\n  testIDPrefix?: string;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n});\n\nconst OtpInputs = forwardRef<OtpInputsRef, Props>(\n  (\n    {\n      autoFocus,\n      autofillFromClipboard = supportAutofillFromClipboard,\n      autofillListenerIntervalMS = 1000,\n      autoCapitalize = 'none',\n      clearTextOnFocus = false,\n      defaultValue,\n      focusStyles,\n      handleChange = console.log,\n      inputContainerStyles,\n      inputStyles,\n      isRTL = false,\n      keyboardType = 'phone-pad',\n      numberOfInputs = 4,\n      placeholder = '',\n      secureTextEntry = false,\n      selectTextOnFocus = true,\n      style,\n      testIDPrefix = 'otpInput',\n      ...restProps\n    },\n    ref,\n  ) => {\n    const previousCopiedText = useRef<string>('');\n    const inputs = useRef<Array<RefObject<TextInput>>>([]);\n    const [{ otpCode, hasKeySupport }, dispatch] = useReducer(reducer, {}, () => ({\n      otpCode: fillOtpCode(numberOfInputs, defaultValue),\n      handleChange,\n      hasKeySupport: Platform.OS === 'ios',\n    }));\n\n    useEffect(() => {\n      if (defaultValue) {\n        dispatch({\n          type: 'setOtpCode',\n          payload: { numberOfInputs, code: defaultValue },\n        });\n      }\n    }, [defaultValue, numberOfInputs]);\n\n    useEffect(() => {\n      dispatch({ type: 'setHandleChange', payload: handleChange });\n    }, [handleChange]);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        reset: (): void => {\n          dispatch({ type: 'clearOtp', payload: numberOfInputs });\n          inputs.current.forEach((input) => input?.current?.clear());\n          previousCopiedText.current = '';\n          Clipboard.setString('');\n        },\n        focus: (): void => {\n          const firstInput = inputs.current[0];\n          firstInput?.current?.focus();\n        },\n      }),\n      [numberOfInputs],\n    );\n\n    const handleInputTextChange = (text: string, index: number): void => {\n      if (!text.length) {\n        handleClearInput(index);\n      }\n\n      if (text.length > 1) {\n        handleClearInput(index);\n        Keyboard.dismiss();\n        return fillInputs(text);\n      }\n\n      if (text) {\n        dispatch({\n          type: 'setOtpTextForIndex',\n          payload: {\n            text,\n            index,\n          },\n        });\n        focusInput(index + 1);\n      }\n\n      if (index === numberOfInputs - 1 && text) {\n        Keyboard.dismiss();\n      }\n    };\n\n    const handleTextChange = (text: string, index: number) => {\n      if (\n        (Platform.OS === 'android' && !hasKeySupport) ||\n        // Pasted from input accessory\n        (Platform.OS === 'ios' && text.length > 1)\n      ) {\n        handleInputTextChange(text, index);\n      }\n    };\n\n    const handleKeyPress = (\n      { nativeEvent: { key } }: NativeSyntheticEvent<TextInputKeyPressEventData>,\n      index: number,\n    ) => {\n      const text = key === 'Backspace' || key.length > 1 ? '' : key;\n      handleInputTextChange(text, index);\n\n      if (Platform.OS === 'android' && !hasKeySupport && !isNaN(parseInt(key)))\n        dispatch({ type: 'setHasKeySupport', payload: true });\n    };\n\n    const focusInput = useCallback(\n      (index: number): void => {\n        if (index >= 0 && index < numberOfInputs) {\n          const input = inputs.current[index];\n          input?.current?.focus();\n        }\n      },\n      [numberOfInputs],\n    );\n\n    const handleClearInput = useCallback(\n      (inputIndex: number) => {\n        const input = inputs.current[inputIndex];\n        input?.current?.clear();\n        dispatch({\n          type: 'setOtpTextForIndex',\n          payload: {\n            index: inputIndex,\n            text: '',\n          },\n        });\n        focusInput(inputIndex - 1);\n      },\n      [focusInput],\n    );\n\n    const fillInputs = useCallback(\n      (code: string) => {\n        dispatch({\n          type: 'setOtpCode',\n          payload: { numberOfInputs, code },\n        });\n      },\n      [numberOfInputs],\n    );\n\n    const listenOnCopiedText = useCallback(async (): Promise<void> => {\n      const copiedText = await Clipboard.getString();\n      const otpCodeValue = Object.values(otpCode).join('');\n\n      if (\n        copiedText?.length === numberOfInputs &&\n        copiedText !== otpCodeValue &&\n        copiedText !== previousCopiedText.current\n      ) {\n        previousCopiedText.current = copiedText;\n        fillInputs(copiedText);\n      }\n    }, [fillInputs, numberOfInputs, otpCode]);\n\n    useEffect(() => {\n      let interval: NodeJS.Timeout;\n\n      if (autofillFromClipboard) {\n        interval = setInterval(() => {\n          listenOnCopiedText();\n        }, autofillListenerIntervalMS);\n      }\n\n      return () => {\n        clearInterval(interval);\n      };\n    }, [autofillFromClipboard, autofillListenerIntervalMS, listenOnCopiedText, numberOfInputs]);\n\n    const renderInputs = (): Array<JSX.Element> => {\n      const iterationArray = Array<number>(numberOfInputs).fill(0);\n\n      return iterationArray.map((_, index) => {\n        let inputIndex = index;\n        if (isRTL) {\n          inputIndex = numberOfInputs - 1 - index;\n        }\n        const inputValue = otpCode[`${inputIndex}`];\n\n        if (!inputs.current[inputIndex]) {\n          inputs.current[inputIndex] = React.createRef<TextInput>();\n        }\n\n        return (\n          <OtpInput\n            accessible\n            accessibilityLabel={`${testIDPrefix}-${inputIndex}`}\n            autoCapitalize={autoCapitalize}\n            autoFocus={index === 0 && autoFocus}\n            clearTextOnFocus={clearTextOnFocus}\n            firstInput={index === 0}\n            focusStyles={focusStyles}\n            handleKeyPress={(keyPressEvent: NativeSyntheticEvent<TextInputKeyPressEventData>) =>\n              handleKeyPress(keyPressEvent, inputIndex)\n            }\n            handleTextChange={(text: string) => handleTextChange(text, inputIndex)}\n            inputContainerStyles={inputContainerStyles}\n            inputStyles={inputStyles}\n            inputValue={inputValue}\n            key={inputIndex}\n            keyboardType={keyboardType}\n            maxLength={Platform.select({\n              android: 1,\n              ios: index === 0 ? numberOfInputs : 1,\n            })}\n            numberOfInputs={numberOfInputs}\n            placeholder={placeholder}\n            ref={inputs.current[inputIndex]}\n            secureTextEntry={secureTextEntry}\n            selectTextOnFocus={selectTextOnFocus}\n            testID={`${testIDPrefix}-${inputIndex}`}\n            {...restProps}\n          />\n        );\n      });\n    };\n\n    // @ts-expect-error\n    return <View style={style || styles.container}>{renderInputs()}</View>;\n  },\n);\n\nexport { OtpInputsRef };\nexport default OtpInputs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}